load("@flare_timing//:default-extensions.bzl", "DEFAULT_EXTENSIONS")

load(
    "@io_tweag_rules_haskell//haskell:haskell.bzl",
    "haskell_toolchain",
)

haskell_toolchain(
    name = "ghc",
    tools = "@ghc//:bin",
    version = "8.2.2",
)

haskell_import(name = "aeson")
haskell_import(name = "base")
haskell_import(name = "bytestring")
haskell_import(name = "clock")
haskell_import(name = "cmdargs")
haskell_import(name = "containers")
haskell_import(name = "directory")
haskell_import(name = "filemanip")
haskell_import(name = "filepath")
haskell_import(name = "formatting")
haskell_import(name = "lens")
haskell_import(name = "mtl")
haskell_import(name = "raw-strings-qq")
haskell_import(name = "safe-exceptions")
haskell_import(name = "time")
haskell_import(name = "transformers")
haskell_import(name = "uom-plugin")
haskell_import(name = "yaml")

COMPILER_FLAGS = [
    "-rtsopts",
    "-threaded",
    "-with-rtsopts=-N",
    "-Wall",
    "-fplugin Data.UnitsOfMeasure.Plugin",
    ] + DEFAULT_EXTENSIONS

DEPS = [
    ":base",
    ":aeson",
    ":bytestring",
    ":clock",
    ":cmdargs",
    ":directory",
    ":filepath",
    ":filemanip",
    ":formatting",
    ":mtl",
    ":raw-strings-qq",
    ":transformers",
    ":yaml",
    ":uom-plugin",
    "//cmd:flight-cmd",
    "//comp:flight-comp",
    "//latlng:flight-latlng",
    "//scribe:flight-scribe",
    "//time:flight-time",
    ]

haskell_binary(
    name = "extract-input",
    srcs = glob(["prod-apps/extract-input/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        "//earth:flight-earth",
        "//fsdb:flight-fsdb",
        "//gap:flight-gap",
        "//mask:flight-mask",
        "//zone:flight-zone",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "fs-score",
    srcs = glob(["prod-apps/extract-input/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":containers",
        "//earth:flight-earth",
        "//fsdb:flight-fsdb",
        "//gap:flight-gap",
        "//mask:flight-mask",
        "//zone:flight-zone",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "task-length",
    srcs = glob(["prod-apps/task-length/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":safe-exceptions",
        "//route:flight-route",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "cross-zone",
    srcs = glob(["prod-apps/cross-zone/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":lens",
        ":safe-exceptions",
        "//siggy-chardust:siggy-chardust",
        "//earth:flight-earth",
        "//span:flight-span",
        "//mask:flight-mask",
        "//units:flight-units",
        "//zone:flight-zone",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "tag-zone",
    srcs = glob(["prod-apps/tag-zone/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":safe-exceptions",
        ":time",
        "//mask:flight-mask",
        "//zone:flight-zone",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "unpack-track",
    srcs = glob(["prod-apps/unpack-track/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":lens",
        ":safe-exceptions",
        ":time",
        "//siggy-chardust:siggy-chardust",
        "//kml:flight-kml",
        "//lookup:flight-lookup",
        "//mask:flight-mask",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "align-time",
    srcs = glob(["prod-apps/align-time/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":lens",
        ":safe-exceptions",
        ":time",
        "//kml:flight-kml",
        "//lookup:flight-lookup",
        "//mask:flight-mask",
        "//siggy-chardust:siggy-chardust",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "discard-further",
    srcs = glob(["prod-apps/discard-further/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":safe-exceptions",
        "//clip:flight-clip",
        "//gap:flight-gap",
        "//lookup:flight-lookup",
        "//mask:flight-mask",
        "//route:flight-route",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "mask-track",
    srcs = glob(["prod-apps/mask-track/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":containers",
        ":lens",
        ":safe-exceptions",
        ":time",
        "//clip:flight-clip",
        "//gap:flight-gap",
        "//kml:flight-kml",
        "//lookup:flight-lookup",
        "//mask:flight-mask",
        "//route:flight-route",
        "//span:flight-span",
        "//siggy-chardust:siggy-chardust",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "land-out",
    srcs = glob(["prod-apps/land-out/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":safe-exceptions",
        "//gap:flight-gap",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "gap-point",
    srcs = glob(["prod-apps/gap-point/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS,
    deps = DEPS + [
        ":containers",
        ":safe-exceptions",
        "//gap:flight-gap",
        "//lookup:flight-lookup",
        "//mask:flight-mask",
        "//route:flight-route",
        "//zone:flight-zone",
        ],
    visibility = ["//visibility:public"],
)

COMPILER_FLAGS_TEST = [
    "-rtsopts",
    "-threaded",
    "-with-rtsopts=-N",
    "-Wall",
    ] + DEFAULT_EXTENSIONS

DEPS_TEST = [
    ":base",
    ":cmdargs",
    ":directory",
    ":filemanip",
    ":filepath",
    ":raw-strings-qq",
    "//cmd:flight-cmd",
    "//comp:flight-comp",
    ]

haskell_binary(
    name = "test-fsdb-parser",
    srcs = glob(["test-apps/fsdb-parser/**/*.hs"]),
    compiler_flags = [
        "-fplugin Data.UnitsOfMeasure.Plugin",
        ] + COMPILER_FLAGS_TEST,
    deps = DEPS_TEST + [
        ":uom-plugin",
        "//fsdb:flight-fsdb",
        "//units:flight-units",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "test-igc-parser",
    srcs = glob(["test-apps/igc-parser/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS_TEST,
    deps = DEPS_TEST + [
        "//igc:flight-igc",
        ],
    visibility = ["//visibility:public"],
)

haskell_binary(
    name = "test-kml-parser",
    srcs = glob(["test-apps/kml-parser/**/*.hs"]),
    compiler_flags = COMPILER_FLAGS_TEST,
    deps = DEPS_TEST + [
        "//kml:flight-kml",
        ],
    visibility = ["//visibility:public"],
)
