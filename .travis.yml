# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs '--output=.travis.yml' '--config=cabal.haskell-ci' 'cabal.project' '--cabal-install-version=2.4'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.4,ghc-8.2.2], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - UNCONSTRAINED=${UNCONSTRAINED-true}
  - NOINSTALLEDCONSTRAINTS=${NOINSTALLEDCONSTRAINTS-false}
  - GHCHEAD=${GHCHEAD-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'packages: \"build\" \"detour-via-sci\" \"detour-via-uom\" \"cmd\" \"comp\" \"earth\" \"fsdb\" \"gap\" \"igc\" \"kml\" \"latlng\" \"lookup\" \"mask\" \"route\" \"scribe\" \"siggy-chardust\" \"span\" \"task\" \"tasty-compare\" \"track\" \"units\" \"zone\" \"flare-timing\"\\n' > cabal.project"
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- build-flare-timing | grep -vw -- detour-via-sci | grep -vw -- detour-via-uom | grep -vw -- flight-cmd | grep -vw -- flight-comp | grep -vw -- flight-earth | grep -vw -- flight-fsdb | grep -vw -- flight-gap | grep -vw -- flight-igc | grep -vw -- flight-kml | grep -vw -- flight-latlng | grep -vw -- flight-lookup | grep -vw -- flight-mask | grep -vw -- flight-route | grep -vw -- flight-scribe | grep -vw -- siggy-chardust | grep -vw -- flight-span | grep -vw -- flight-task | grep -vw -- tasty-compare | grep -vw -- flight-track | grep -vw -- flight-units | grep -vw -- flight-zone | grep -vw -- flare-timing | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "build/configure.ac" ]; then
      (cd "build" && autoreconf -i);
    fi
  - if [ -f "detour-via-sci/configure.ac" ]; then
      (cd "detour-via-sci" && autoreconf -i);
    fi
  - if [ -f "detour-via-uom/configure.ac" ]; then
      (cd "detour-via-uom" && autoreconf -i);
    fi
  - if [ -f "cmd/configure.ac" ]; then
      (cd "cmd" && autoreconf -i);
    fi
  - if [ -f "comp/configure.ac" ]; then
      (cd "comp" && autoreconf -i);
    fi
  - if [ -f "earth/configure.ac" ]; then
      (cd "earth" && autoreconf -i);
    fi
  - if [ -f "fsdb/configure.ac" ]; then
      (cd "fsdb" && autoreconf -i);
    fi
  - if [ -f "gap/configure.ac" ]; then
      (cd "gap" && autoreconf -i);
    fi
  - if [ -f "igc/configure.ac" ]; then
      (cd "igc" && autoreconf -i);
    fi
  - if [ -f "kml/configure.ac" ]; then
      (cd "kml" && autoreconf -i);
    fi
  - if [ -f "latlng/configure.ac" ]; then
      (cd "latlng" && autoreconf -i);
    fi
  - if [ -f "lookup/configure.ac" ]; then
      (cd "lookup" && autoreconf -i);
    fi
  - if [ -f "mask/configure.ac" ]; then
      (cd "mask" && autoreconf -i);
    fi
  - if [ -f "route/configure.ac" ]; then
      (cd "route" && autoreconf -i);
    fi
  - if [ -f "scribe/configure.ac" ]; then
      (cd "scribe" && autoreconf -i);
    fi
  - if [ -f "siggy-chardust/configure.ac" ]; then
      (cd "siggy-chardust" && autoreconf -i);
    fi
  - if [ -f "span/configure.ac" ]; then
      (cd "span" && autoreconf -i);
    fi
  - if [ -f "task/configure.ac" ]; then
      (cd "task" && autoreconf -i);
    fi
  - if [ -f "tasty-compare/configure.ac" ]; then
      (cd "tasty-compare" && autoreconf -i);
    fi
  - if [ -f "track/configure.ac" ]; then
      (cd "track" && autoreconf -i);
    fi
  - if [ -f "units/configure.ac" ]; then
      (cd "units" && autoreconf -i);
    fi
  - if [ -f "zone/configure.ac" ]; then
      (cd "zone" && autoreconf -i);
    fi
  - if [ -f "flare-timing/configure.ac" ]; then
      (cd "flare-timing" && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
  - rm -rf .ghc.environment.* "build"/dist "detour-via-sci"/dist "detour-via-uom"/dist "cmd"/dist "comp"/dist "earth"/dist "fsdb"/dist "gap"/dist "igc"/dist "kml"/dist "latlng"/dist "lookup"/dist "mask"/dist "route"/dist "scribe"/dist "siggy-chardust"/dist "span"/dist "task"/dist "tasty-compare"/dist "track"/dist "units"/dist "zone"/dist "flare-timing"/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - cabal new-sdist all
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  - "printf 'packages: build-flare-timing-*/*.cabal detour-via-sci-*/*.cabal detour-via-uom-*/*.cabal flight-cmd-*/*.cabal flight-comp-*/*.cabal flight-earth-*/*.cabal flight-fsdb-*/*.cabal flight-gap-*/*.cabal flight-igc-*/*.cabal flight-kml-*/*.cabal flight-latlng-*/*.cabal flight-lookup-*/*.cabal flight-mask-*/*.cabal flight-route-*/*.cabal flight-scribe-*/*.cabal siggy-chardust-*/*.cabal flight-span-*/*.cabal flight-task-*/*.cabal tasty-compare-*/*.cabal flight-track-*/*.cabal flight-units-*/*.cabal flight-zone-*/*.cabal flare-timing-*/*.cabal\\n' > cabal.project"
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg  | grep -vw -- build-flare-timing | grep -vw -- detour-via-sci | grep -vw -- detour-via-uom | grep -vw -- flight-cmd | grep -vw -- flight-comp | grep -vw -- flight-earth | grep -vw -- flight-fsdb | grep -vw -- flight-gap | grep -vw -- flight-igc | grep -vw -- flight-kml | grep -vw -- flight-latlng | grep -vw -- flight-lookup | grep -vw -- flight-mask | grep -vw -- flight-route | grep -vw -- flight-scribe | grep -vw -- siggy-chardust | grep -vw -- flight-span | grep -vw -- flight-task | grep -vw -- tasty-compare | grep -vw -- flight-track | grep -vw -- flight-units | grep -vw -- flight-zone | grep -vw -- flare-timing | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH} all
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

  # haddock
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

  # Build without installed constraints for packages in global-db
  - if $UNCONSTRAINED; then rm -f cabal.project.local; echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks all; else echo "Not building without installed constraints"; fi

# REGENDATA ["--output=.travis.yml","--config=cabal.haskell-ci","cabal.project","--cabal-install-version=2.4"]
# EOF
