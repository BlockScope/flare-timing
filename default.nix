# Generated by stackage2nix 0.7.2 from "./stack.yaml"
{ nixpkgs ? import <nixpkgs> {} }:

let
  stackPackages =
    { pkgs, stdenv, callPackage }:
    
    self: {
      "build-flare-timing" = callPackage
        ({ mkDerivation, ansi-terminal, base, shake, time }:
         mkDerivation {
           pname = "build-flare-timing";
           version = "0.1.0";
           src = ./build;
           isLibrary = false;
           isExecutable = true;
           executableHaskellDepends = [ ansi-terminal base shake time ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "A shake build of flare-timing";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "detour-via-sci" = callPackage
        ({ mkDerivation, aeson, base, cassava, doctest, newtype, scientific
         , siggy-chardust, template-haskell
         }:
         mkDerivation {
           pname = "detour-via-sci";
           version = "1.0.0";
           src = ./detour-via-sci;
           libraryHaskellDepends = [
             aeson base cassava newtype scientific siggy-chardust
             template-haskell
           ];
           testHaskellDepends = [
             aeson base cassava doctest newtype scientific siggy-chardust
             template-haskell
           ];
           homepage = "https://github.com/blockscope/flare-timing/tree/master/detour-via-sci#readme";
           description = "JSON and CSV encoding for rationals as decimal point numbers";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "detour-via-uom" = callPackage
        ({ mkDerivation, aeson, base, cassava, detour-via-sci, doctest
         , newtype, scientific, uom-plugin
         }:
         mkDerivation {
           pname = "detour-via-uom";
           version = "1.0.0";
           src = ./detour-via-uom;
           libraryHaskellDepends = [
             aeson base cassava detour-via-sci newtype scientific uom-plugin
           ];
           testHaskellDepends = [
             aeson base cassava detour-via-sci doctest newtype scientific
             uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing/tree/master/detour-via-uom#readme";
           description = "JSON and CSV encoding for quantities";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-cmd" = callPackage
        ({ mkDerivation, base, cmdargs, directory, filemanip, filepath
         , flight-span, mtl, raw-strings-qq, transformers
         }:
         mkDerivation {
           pname = "flight-cmd";
           version = "0.1.0";
           src = ./cmd;
           libraryHaskellDepends = [
             base cmdargs directory filemanip filepath flight-span mtl
             raw-strings-qq transformers
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Command line options";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-comp" = callPackage
        ({ mkDerivation, aeson, base, bytestring, cassava, containers
         , detour-via-sci, directory, filemanip, filepath, flight-gap
         , flight-latlng, flight-route, flight-units, flight-zone, lens, mtl
         , path, scientific, smallcheck, split, tasty, tasty-hunit
         , tasty-quickcheck, tasty-smallcheck, time, unordered-containers
         , uom-plugin, vector
         }:
         mkDerivation {
           pname = "flight-comp";
           version = "0.1.0";
           src = ./comp;
           libraryHaskellDepends = [
             aeson base bytestring cassava containers detour-via-sci directory
             filemanip filepath flight-gap flight-latlng flight-route
             flight-units flight-zone lens mtl path scientific split time
             unordered-containers uom-plugin vector
           ];
           testHaskellDepends = [
             aeson base bytestring cassava containers detour-via-sci directory
             filemanip filepath flight-gap flight-latlng flight-route
             flight-units flight-zone lens mtl path scientific smallcheck split
             tasty tasty-hunit tasty-quickcheck tasty-smallcheck time
             unordered-containers uom-plugin vector
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Hang gliding and paragliding competition scoring inputs";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-earth" = callPackage
        ({ mkDerivation, aeson, base, bifunctors, detour-via-sci, fgl
         , flight-latlng, flight-units, flight-zone, hcoord, hcoord-utm, mtl
         , numbers, scientific, siggy-chardust, smallcheck, tasty
         , tasty-compare, tasty-hunit, tasty-quickcheck, tasty-smallcheck
         , uom-plugin
         }:
         mkDerivation {
           pname = "flight-earth";
           version = "0.1.0";
           src = ./earth;
           libraryHaskellDepends = [
             aeson base bifunctors detour-via-sci fgl flight-latlng flight-units
             flight-zone hcoord hcoord-utm mtl numbers scientific siggy-chardust
             uom-plugin
           ];
           testHaskellDepends = [
             aeson base bifunctors detour-via-sci fgl flight-latlng flight-units
             flight-zone hcoord hcoord-utm mtl numbers scientific siggy-chardust
             smallcheck tasty tasty-compare tasty-hunit tasty-quickcheck
             tasty-smallcheck uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Distances on the WGS84 ellipsoid, the FAI sphere and the UTM projection";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-fsdb" = callPackage
        ({ mkDerivation, aeson, base, containers, detour-via-sci
         , flight-comp, flight-gap, flight-latlng, flight-units, flight-zone
         , hxt, hxt-xpath, megaparsec, newtype, path, scientific, smallcheck
         , split, tasty, tasty-hunit, tasty-quickcheck, tasty-smallcheck
         , time, uom-plugin
         }:
         mkDerivation {
           pname = "flight-fsdb";
           version = "0.1.0";
           src = ./fsdb;
           libraryHaskellDepends = [
             aeson base containers detour-via-sci flight-comp flight-gap
             flight-latlng flight-units flight-zone hxt hxt-xpath megaparsec
             newtype path scientific split time uom-plugin
           ];
           testHaskellDepends = [
             aeson base containers detour-via-sci flight-comp flight-gap
             flight-latlng flight-units flight-zone hxt hxt-xpath megaparsec
             newtype path scientific smallcheck split tasty tasty-hunit
             tasty-quickcheck tasty-smallcheck time uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "A parser for fsdb, the database XML format of FS";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-gap" = callPackage
        ({ mkDerivation, aeson, base, containers, detour-via-sci
         , detour-via-uom, flight-units, newtype, scientific, siggy-chardust
         , smallcheck, statistics, tasty, tasty-hunit, tasty-quickcheck
         , tasty-smallcheck, template-haskell, uom-plugin, vector
         }:
         mkDerivation {
           pname = "flight-gap";
           version = "0.1.0";
           src = ./gap;
           libraryHaskellDepends = [
             aeson base containers detour-via-sci detour-via-uom flight-units
             newtype scientific siggy-chardust statistics template-haskell
             uom-plugin vector
           ];
           testHaskellDepends = [
             aeson base containers detour-via-sci detour-via-uom flight-units
             newtype scientific siggy-chardust smallcheck statistics tasty
             tasty-hunit tasty-quickcheck tasty-smallcheck template-haskell
             uom-plugin vector
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "GAP Scoring";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-igc" = callPackage
        ({ mkDerivation, base, bytestring, parsec, utf8-string }:
         mkDerivation {
           pname = "flight-igc";
           version = "1.0.0";
           src = ./igc;
           libraryHaskellDepends = [ base bytestring parsec utf8-string ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "A parser for IGC files";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-kml" = callPackage
        ({ mkDerivation, aeson, base, detour-via-sci, doctest, hxt
         , hxt-xpath, parsec, path, raw-strings-qq, siggy-chardust
         , smallcheck, split, tasty, tasty-hunit, tasty-quickcheck
         , tasty-smallcheck, template-haskell, time
         }:
         mkDerivation {
           pname = "flight-kml";
           version = "1.0.1";
           src = ./kml;
           libraryHaskellDepends = [
             aeson base detour-via-sci hxt hxt-xpath parsec path siggy-chardust
             split time
           ];
           testHaskellDepends = [
             aeson base detour-via-sci doctest hxt hxt-xpath parsec path
             raw-strings-qq siggy-chardust smallcheck split tasty tasty-hunit
             tasty-quickcheck tasty-smallcheck template-haskell time
           ];
           homepage = "https://github.com/blockscope/flare-timing/tree/master/kml#readme";
           description = "Parsing of pilot tracklogs dumped as KML";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-latlng" = callPackage
        ({ mkDerivation, aeson, base, bifunctors, bytestring, cassava
         , detour-via-sci, detour-via-uom, flight-units, formatting, newtype
         , numbers, random, siggy-chardust, smallcheck, tasty-quickcheck
         , text, uom-plugin
         }:
         mkDerivation {
           pname = "flight-latlng";
           version = "0.1.0";
           src = ./latlng;
           libraryHaskellDepends = [
             aeson base bifunctors bytestring cassava detour-via-sci
             detour-via-uom flight-units formatting newtype numbers random
             siggy-chardust smallcheck tasty-quickcheck text uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Latitude and longitude as used in hang gliding and paragliding competitions";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-lookup" = callPackage
        ({ mkDerivation, aeson, base, bytestring, cassava, containers
         , detour-via-sci, directory, filemanip, filepath, flight-comp
         , flight-gap, flight-kml, flight-latlng, flight-mask, flight-route
         , flight-zone, lens, mtl, path, scientific, split, time
         , unordered-containers, uom-plugin
         }:
         mkDerivation {
           pname = "flight-lookup";
           version = "0.1.0";
           src = ./lookup;
           libraryHaskellDepends = [
             aeson base bytestring cassava containers detour-via-sci directory
             filemanip filepath flight-comp flight-gap flight-kml flight-latlng
             flight-mask flight-route flight-zone lens mtl path scientific split
             time unordered-containers uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Hang gliding and paragliding competition data access";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-mask" = callPackage
        ({ mkDerivation, base, bytestring, cmdargs, containers
         , detour-via-sci, directory, fgl, filepath, flight-comp
         , flight-earth, flight-gap, flight-kml, flight-latlng, flight-route
         , flight-scribe, flight-span, flight-task, flight-track
         , flight-units, flight-zone, lens, mtl, numbers, path
         , siggy-chardust, split, time, uom-plugin, yaml
         }:
         mkDerivation {
           pname = "flight-mask";
           version = "0.1.0";
           src = ./mask;
           libraryHaskellDepends = [
             base bytestring cmdargs containers detour-via-sci directory fgl
             filepath flight-comp flight-earth flight-gap flight-kml
             flight-latlng flight-route flight-scribe flight-span flight-task
             flight-track flight-units flight-zone lens mtl numbers path
             siggy-chardust split time uom-plugin yaml
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Track logs masked by competition task zones";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-route" = callPackage
        ({ mkDerivation, aeson, base, bifunctors, detour-via-sci
         , flight-earth, flight-latlng, flight-task, flight-units
         , flight-zone, hcoord-utm, numbers, scientific, siggy-chardust
         , uom-plugin
         }:
         mkDerivation {
           pname = "flight-route";
           version = "0.1.0";
           src = ./route;
           libraryHaskellDepends = [
             aeson base bifunctors detour-via-sci flight-earth flight-latlng
             flight-task flight-units flight-zone hcoord-utm numbers scientific
             siggy-chardust uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Control zones to fly";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-scribe" = callPackage
        ({ mkDerivation, aeson, base, bytestring, cassava, containers
         , detour-via-sci, directory, filemanip, filepath, flight-comp
         , flight-gap, flight-latlng, flight-route, flight-zone, mtl, path
         , scientific, split, time, unordered-containers, vector, yaml
         }:
         mkDerivation {
           pname = "flight-scribe";
           version = "0.1.0";
           src = ./scribe;
           libraryHaskellDepends = [
             aeson base bytestring cassava containers detour-via-sci directory
             filemanip filepath flight-comp flight-gap flight-latlng
             flight-route flight-zone mtl path scientific split time
             unordered-containers vector yaml
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Hang gliding and paragliding competition scoring files";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "siggy-chardust" = callPackage
        ({ mkDerivation, base, doctest, smallcheck, tasty, tasty-hunit
         , tasty-quickcheck, tasty-smallcheck
         }:
         mkDerivation {
           pname = "siggy-chardust";
           version = "1.0.0";
           src = ./siggy-chardust;
           libraryHaskellDepends = [ base ];
           testHaskellDepends = [
             base doctest smallcheck tasty tasty-hunit tasty-quickcheck
             tasty-smallcheck
           ];
           homepage = "https://github.com/blockscope/flare-timing/tree/master/siggy-chardust#readme";
           description = "Rounding rationals to significant digits and decimal places";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-span" = callPackage
        ({ mkDerivation, base, cmdargs }:
         mkDerivation {
           pname = "flight-span";
           version = "0.1.0";
           src = ./span;
           libraryHaskellDepends = [ base cmdargs ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "How to measure a distance that spans two points";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-task" = callPackage
        ({ mkDerivation, aeson, base, bifunctors, detour-via-sci, fgl
         , flight-earth, flight-latlng, flight-units, flight-zone, mtl
         , numbers, scientific, siggy-chardust, smallcheck, tasty
         , tasty-compare, tasty-hunit, tasty-quickcheck, tasty-smallcheck
         , uom-plugin
         }:
         mkDerivation {
           pname = "flight-task";
           version = "0.1.0";
           src = ./task;
           libraryHaskellDepends = [
             aeson base bifunctors detour-via-sci fgl flight-earth flight-latlng
             flight-units flight-zone mtl numbers scientific siggy-chardust
             uom-plugin
           ];
           testHaskellDepends = [
             aeson base bifunctors detour-via-sci fgl flight-earth flight-latlng
             flight-units flight-zone mtl numbers scientific siggy-chardust
             smallcheck tasty tasty-compare tasty-hunit tasty-quickcheck
             tasty-smallcheck uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Tasks to fly";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "tasty-compare" = callPackage
        ({ mkDerivation, base, call-stack, tasty, tasty-hunit }:
         mkDerivation {
           pname = "tasty-compare";
           version = "0.1.0";
           src = ./tasty-compare;
           libraryHaskellDepends = [ base call-stack tasty tasty-hunit ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Tasty HUnit extensions for comparisons";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-track" = callPackage
        ({ mkDerivation, base, bytestring, containers, directory, filepath
         , flight-comp, flight-igc, flight-kml, mtl, path, split, time
         , utf8-string
         }:
         mkDerivation {
           pname = "flight-track";
           version = "0.1.0";
           src = ./track;
           libraryHaskellDepends = [
             base bytestring containers directory filepath flight-comp
             flight-igc flight-kml mtl path split time utf8-string
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Hang gliding and paragliding competition track logs";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-units" = callPackage
        ({ mkDerivation, base, bifunctors, fixed, formatting, numbers
         , siggy-chardust, text, uom-plugin
         }:
         mkDerivation {
           pname = "flight-units";
           version = "0.1.0";
           src = ./units;
           libraryHaskellDepends = [
             base bifunctors fixed formatting numbers siggy-chardust text
             uom-plugin
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Units used in hang gliding and paragliding competitions";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flight-zone" = callPackage
        ({ mkDerivation, aeson, aeson-pretty, base, bytestring
         , detour-via-sci, detour-via-uom, flight-latlng, flight-units, here
         , newtype, scientific, siggy-chardust, tasty, tasty-discover
         , tasty-golden, tasty-hspec, text, uom-plugin, yaml
         }:
         mkDerivation {
           pname = "flight-zone";
           version = "0.1.0";
           src = ./zone;
           libraryHaskellDepends = [
             aeson base detour-via-sci detour-via-uom flight-latlng flight-units
             newtype scientific siggy-chardust uom-plugin
           ];
           testHaskellDepends = [
             aeson aeson-pretty base bytestring detour-via-sci detour-via-uom
             flight-latlng flight-units here newtype scientific siggy-chardust
             tasty tasty-discover tasty-golden tasty-hspec text uom-plugin yaml
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "Control zones to fly";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "flare-timing" = callPackage
        ({ mkDerivation, aeson, base, bytestring, clock, cmdargs
         , containers, directory, filemanip, filepath, flight-cmd
         , flight-comp, flight-earth, flight-fsdb, flight-gap, flight-igc
         , flight-kml, flight-latlng, flight-lookup, flight-mask
         , flight-route, flight-scribe, flight-span, flight-units
         , flight-zone, formatting, lens, mtl, raw-strings-qq
         , siggy-chardust, time, transformers, uom-plugin, yaml
         }:
         mkDerivation {
           pname = "flare-timing";
           version = "0.1.0";
           src = ./flare-timing;
           isLibrary = false;
           isExecutable = true;
           executableHaskellDepends = [
             aeson base bytestring clock cmdargs containers directory filemanip
             filepath flight-cmd flight-comp flight-earth flight-fsdb flight-gap
             flight-igc flight-kml flight-latlng flight-lookup flight-mask
             flight-route flight-scribe flight-span flight-units flight-zone
             formatting lens mtl raw-strings-qq siggy-chardust time transformers
             uom-plugin yaml
           ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "A collection of apps and libraries for scoring hang gliding and paragliding competitions";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "www-flare-timing" = callPackage
        ({ mkDerivation, aeson, base, bytestring, cmdargs, directory
         , filemanip, filepath, flight-comp, hlint, mtl, raw-strings-qq
         , servant, servant-server, transformers, wai, wai-cors, warp, yaml
         }:
         mkDerivation {
           pname = "www-flare-timing";
           version = "0.1.0";
           src = ./www;
           isLibrary = false;
           isExecutable = true;
           executableHaskellDepends = [
             aeson base bytestring cmdargs directory filemanip filepath
             flight-comp mtl raw-strings-qq servant servant-server transformers
             wai wai-cors warp yaml
           ];
           testHaskellDepends = [ base flight-comp hlint ];
           homepage = "https://github.com/blockscope/flare-timing#readme";
           description = "A collection of apps and libraries for scoring hang gliding and paragliding competitions";
           license = stdenv.lib.licenses.mpl20;
         }) {};
      "hcoord" = callPackage
        ({ mkDerivation, base, fetchgit, mtl }:
         mkDerivation {
           pname = "hcoord";
           version = "2.1.0";
           src = fetchgit {
             url = "https://github.com/blockscope/hcoord.git";
             sha256 = "0267n694m08bv73ld7f5flb66h3dxc7xgrbmkr757q0g87l8ndzq";
             rev = "3c3859dac5da111e57a6de09764ffdb127197c4a";
           };
           postUnpack = "sourceRoot+=/hcoord; echo source root reset to $sourceRoot";
           libraryHaskellDepends = [ base mtl ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/danfran/hcoord#readme";
           description = "Short synopsis";
           license = stdenv.lib.licenses.bsd3;
         }) {};
      "hcoord-utm" = callPackage
        ({ mkDerivation, base, fetchgit, hcoord, mtl }:
         mkDerivation {
           pname = "hcoord-utm";
           version = "2.1.0";
           src = fetchgit {
             url = "https://github.com/blockscope/hcoord.git";
             sha256 = "0267n694m08bv73ld7f5flb66h3dxc7xgrbmkr757q0g87l8ndzq";
             rev = "3c3859dac5da111e57a6de09764ffdb127197c4a";
           };
           postUnpack = "sourceRoot+=/hcoord-utm; echo source root reset to $sourceRoot";
           libraryHaskellDepends = [ base hcoord mtl ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/danfran/hcoord#readme";
           description = "Short synopsis";
           license = stdenv.lib.licenses.bsd3;
         }) {};
      "stack2cabal" = callPackage
        ({ mkDerivation, attoparsec, base, directory, fetchgit, filepath
         , optparse-applicative, process, text, yaml
         }:
         mkDerivation {
           pname = "stack2cabal";
           version = "0.1.0.0";
           src = fetchgit {
             url = "https://github.com/brunjlar/stack2cabal";
             sha256 = "07z38qql61lmfxv1kaj3wkz1kxj3jk18ccdclizajlf39hpgahyl";
             rev = "a8a4cdcacd697cee648af93856735f15de5987a6";
           };
           isLibrary = false;
           isExecutable = true;
           executableHaskellDepends = [
             attoparsec base directory filepath optparse-applicative process
             text yaml
           ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/githubuser/stack2cabal#readme";
           license = stdenv.lib.licenses.mit;
         }) {};
      "pier" = callPackage
        ({ mkDerivation, aeson, base, base64-bytestring, binary
         , binary-orphans, bytestring, Cabal, containers, cryptohash-sha256
         , directory, fetchgit, hashable, http-client, http-client-tls
         , http-types, optparse-applicative, process, shake, split
         , temporary, text, transformers, unix, unordered-containers, yaml
         }:
         mkDerivation {
           pname = "pier";
           version = "0.1.0.0";
           src = fetchgit {
             url = "https://github.com/blockscope/pier.git";
             sha256 = "1k7m1gbql3z0g8bhx0irw89v9nym3js2h8dgkkdlzf4qsyr98c6g";
             rev = "9ea5b2b689610cc779618bdbf7bb169aae0520c9";
           };
           isLibrary = true;
           isExecutable = true;
           libraryHaskellDepends = [
             aeson base base64-bytestring binary binary-orphans bytestring Cabal
             containers cryptohash-sha256 directory hashable http-client
             http-client-tls http-types process shake temporary text
             transformers unix unordered-containers yaml
           ];
           executableHaskellDepends = [
             base Cabal directory optparse-applicative shake split
             unordered-containers
           ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/judah/pier#readme";
           description = "Yet another Haskell build system";
           license = stdenv.lib.licenses.bsd3;
         }) {};
      "hxt-xpath" = callPackage
        ({ mkDerivation, base, containers, directory, filepath, hxt, parsec
         }:
         mkDerivation {
           pname = "hxt-xpath";
           version = "9.1.2.2";
           sha256 = "50377cb5fc17a31091ef41d648cb26ce8d8bd52f9dc639e5b654b118804e9872";
           libraryHaskellDepends = [
             base containers directory filepath hxt parsec
           ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/UweSchmidt/hxt";
           description = "The XPath modules for HXT";
           license = "unknown";
         }) {};
      "uom-plugin" = callPackage
        ({ mkDerivation, base, containers, deepseq, ghc
         , ghc-tcplugins-extra, template-haskell, units-parser
         }:
         mkDerivation {
           pname = "uom-plugin";
           version = "0.3.0.0";
           sha256 = "94be3fdd1c162afec2c0c16a4ee280308d9c519cf5d061b105d426f211a24699";
           libraryHaskellDepends = [
             base containers deepseq ghc ghc-tcplugins-extra template-haskell
             units-parser
           ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/adamgundry/uom-plugin#readme";
           description = "Units of measure as a GHC typechecker plugin";
           license = stdenv.lib.licenses.bsd3;
         }) {};
      "doctest" = callPackage
        ({ mkDerivation, base, base-compat, code-page, deepseq, directory
         , filepath, ghc, ghc-paths, process, syb, transformers
         }:
         mkDerivation {
           pname = "doctest";
           version = "0.15.0";
           sha256 = "f1ae62f740fbf287e067283cebdc3cd9eef447e8e52865efebeb67c418a2818d";
           isLibrary = true;
           isExecutable = true;
           libraryHaskellDepends = [
             base base-compat code-page deepseq directory filepath ghc ghc-paths
             process syb transformers
           ];
           executableHaskellDepends = [
             base base-compat code-page deepseq directory filepath ghc ghc-paths
             process syb transformers
           ];
           doHaddock = false;
           doCheck = false;
           homepage = "https://github.com/sol/doctest#readme";
           description = "Test interactive Haskell examples";
           license = stdenv.lib.licenses.mit;
         }) {};
    };
in nixpkgs.haskell.packages.stackage.lts-1120.override {
  packageSetConfig = self: super: stackPackages { inherit (nixpkgs) pkgs stdenv; inherit (self) callPackage; } super;
}
